[{"/Users/basakonder/Desktop/Bitirme/automl/frontend-react/src/index.js":"1","/Users/basakonder/Desktop/Bitirme/automl/frontend-react/src/App.js":"2","/Users/basakonder/Desktop/Bitirme/automl/frontend-react/src/reportWebVitals.js":"3","/Users/basakonder/Desktop/Bitirme/automl/frontend-react/src/components/AutoMLPipeline.js":"4","/Users/basakonder/Desktop/Bitirme/automl/frontend-react/src/components/Leaderboard.js":"5","/Users/basakonder/Desktop/automl/frontend-local/src/index.js":"6","/Users/basakonder/Desktop/automl/frontend-local/src/App.js":"7","/Users/basakonder/Desktop/automl/frontend-local/src/reportWebVitals.js":"8","/Users/basakonder/Desktop/automl/frontend-local/src/components/AutoMLPipeline.js":"9","/Users/basakonder/Desktop/automl/frontend-local/src/components/UserMode.js":"10","/Users/basakonder/Desktop/automl/frontend-local/src/components/DeveloperMode.js":"11","/Users/basakonder/Desktop/automl/frontend-local/src/components/Leaderboard.js":"12","/Users/basakonder/Desktop/automl/frontend-local/src/components/ManualMode.js":"13","/Users/basakonder/Desktop/automl/frontend-local/src/components/AppBar.js":"14","/Users/basakonder/Desktop/automl/frontend-local/src/components/Predict.js":"15","/Users/basakonder/Desktop/automl/frontend-local/src/components/SliderMinimum.js":"16","/Users/basakonder/Desktop/automl/frontend-local/src/components/VirtualTable.js":"17"},{"size":535,"mtime":1683138845297,"results":"18","hashOfConfig":"19"},{"size":224,"mtime":1683138909409,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1683138845297,"results":"21","hashOfConfig":"19"},{"size":6283,"mtime":1683183569076,"results":"22","hashOfConfig":"19"},{"size":1036,"mtime":1683183619979,"results":"23","hashOfConfig":"19"},{"size":535,"mtime":1684446617774,"results":"24","hashOfConfig":"25"},{"size":224,"mtime":1684449186577,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1684428861200,"results":"27","hashOfConfig":"25"},{"size":4168,"mtime":1685386275833,"results":"28","hashOfConfig":"25"},{"size":7894,"mtime":1685383191718,"results":"29","hashOfConfig":"25"},{"size":20134,"mtime":1685381235048,"results":"30","hashOfConfig":"25"},{"size":3236,"mtime":1684463668017,"results":"31","hashOfConfig":"25"},{"size":15922,"mtime":1685107544310,"results":"32","hashOfConfig":"25"},{"size":3808,"mtime":1685372139793,"results":"33","hashOfConfig":"25"},{"size":10956,"mtime":1685106054866,"results":"34","hashOfConfig":"25"},{"size":1917,"mtime":1685098037871,"results":"35","hashOfConfig":"25"},{"size":4051,"mtime":1685105634884,"results":"36","hashOfConfig":"25"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1i4bssd",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"lg8grp",{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"55"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"55"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"/Users/basakonder/Desktop/Bitirme/automl/frontend-react/src/index.js",[],[],"/Users/basakonder/Desktop/Bitirme/automl/frontend-react/src/App.js",[],[],"/Users/basakonder/Desktop/Bitirme/automl/frontend-react/src/reportWebVitals.js",[],[],"/Users/basakonder/Desktop/Bitirme/automl/frontend-react/src/components/AutoMLPipeline.js",["92","93","94","95","96"],[],"/Users/basakonder/Desktop/Bitirme/automl/frontend-react/src/components/Leaderboard.js",[],[],"/Users/basakonder/Desktop/automl/frontend-local/src/index.js",[],[],[],"/Users/basakonder/Desktop/automl/frontend-local/src/App.js",[],[],"/Users/basakonder/Desktop/automl/frontend-local/src/reportWebVitals.js",[],[],"/Users/basakonder/Desktop/automl/frontend-local/src/components/AutoMLPipeline.js",["97","98","99","100","101","102","103","104"],[],"/Users/basakonder/Desktop/automl/frontend-local/src/components/UserMode.js",["105","106"],[],"/Users/basakonder/Desktop/automl/frontend-local/src/components/DeveloperMode.js",["107","108","109","110","111","112","113","114"],[],"/Users/basakonder/Desktop/automl/frontend-local/src/components/Leaderboard.js",["115","116"],[],"// Leaderboard.js\nimport React, { useState, useMemo } from 'react';\nimport Button from '@mui/material/Button';\nconst Leaderboard = ({ data, selectedModels, setSelectedModels, onSave }) => {\n\n  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });\n  console.log(data);\n  const handleModelSelect = (modelId) => {\n    if (selectedModels.includes(modelId)) {\n      setSelectedModels(selectedModels.filter((id) => id !== modelId));\n    } else {\n      setSelectedModels([...selectedModels, modelId]);\n    }\n  };\n\n  const handleSort = (key) => {\n    let direction = 'asc';\n    if (sortConfig.key === key && sortConfig.direction === 'asc') {\n      direction = 'desc';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  const SortArrow = () => (\n    <span>{'â†“'}</span>\n  );\n\n  const sortedData = React.useMemo(() => {\n    const dataCopy = [...data];\n    if (sortConfig.key !== null) {\n      dataCopy.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'asc' ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'asc' ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return dataCopy;\n  }, [data, sortConfig]);\n  return (\n    <div>\n      <table>\n        {/* Render table header */}\n        <thead>\n          <tr>\n            <th>Select</th>\n            <th onClick={() => handleSort('model_id')}> Model ID  <SortArrow/> </th>\n            <th onClick={() => handleSort('mean_residual_deviance')}>Mean Residual Deviance <SortArrow/> </th>\n            <th onClick={() => handleSort('rmse')}>RMSE  <SortArrow/> </th>\n            <th onClick={() => handleSort('mse')}>MSE  <SortArrow/> </th>\n            <th onClick={() => handleSort('mae')}>MAE  <SortArrow/> </th>\n            <th onClick={() => handleSort('rmsle')}>RMSLE <SortArrow/> </th>\n            <th onClick={() => handleSort('training_time_ms')}>Training Time as ms <SortArrow/> </th>\n            <th onClick={() => handleSort('predict_time_per_row_ms')}>Predict Time per Row as ms <SortArrow/> </th>\n          </tr>\n        </thead>\n        <tbody>\n          {Array.isArray(sortedData) &&\n            sortedData.map((model, index) => (\n              console.log(model),\n              <tr key={model.model_id}>\n                <td>\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedModels.includes(model.model_id)}\n                    onChange={() => handleModelSelect(model.model_id)}\n                  />\n                </td>\n                <td>{model.model_id}</td>\n                <td>{model.mean_residual_deviance}</td>\n                <td>{model.rmse}</td>\n                <td>{model.mse}</td>\n                <td>{model.mae}</td>\n                <td>{model.rmsle}</td>\n                <td>{model.training_time_ms}</td>\n                <td>{model.predict_time_per_row_ms}</td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n      <Button onClick={onSave} style={{ width: \"300px\", height: \"50px\", margin: \"10px\"}} color=\"info\" variant=\"contained\" type=\"submit\"><strong>Save Selected Models</strong></Button>\n    </div>\n  );\n};\n\nexport default Leaderboard;\n","/Users/basakonder/Desktop/automl/frontend-local/src/components/ManualMode.js",["117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140"],[],"import React, { useState, useEffect } from \"react\";\nimport styles from './Manual.module.css';\nimport Leaderboard from './Leaderboard';\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport MinimumDistanceSlider from './SliderMinimum'\nimport PropagateLoader from \"react-spinners/PropagateLoader\";\nimport RingLoader from \"react-spinners/RingLoader\";\nimport Papa from \"papaparse\";\nimport Button from '@mui/material/Button';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst predict_endpoint = 'https://inference-6r72er7ega-uc.a.run.app/predict';\nconst unsupervised_endpoint = 'http://localhost:8000/unsupervised-train-suggest';\nconst unsupervised_final_endpoint = 'http://localhost:8000/unsupervised-train-final';\nconst supervised_endpoint = 'http://localhost:8000/manual-supervised-train';\nconst save_endpoint = 'https://backend-6r72er7ega-uc.a.run.app/save_models';\n\nconst Manual = () => {\n  const [mode, setMode] = React.useState('user');\n  const [unsupervisedFile, setUnsupervisedFile] = useState(null);\n  const [unsupervisedLoading, setunsupervisedLoading] = useState(false);\n  const [trainFile, setTrainFile] = useState(null);\n  const [trainFileLabel, setTrainFileLabel] = useState(\"Choose file\");\n  const [predictFile, setPredictFile] = useState(null);\n  const [predictFileLabel, setPredictFileLabel] = useState(\"Choose file\");\n  const [targetString, setTargetString] = useState(\"\");\n  const [maxRuntimeSecs, setMaxRuntimeSecs] = useState(\"\");\n  const [maxModels, setMaxModels] = useState(\"\");\n  const [nfolds, setNfolds] = useState(\"\");\n  const [seed, setSeed] = useState(\"\");\n  const [selectedAlgo, setSelectedAlgo] = useState(\"glm\");\n  const [selectedModels, setSelectedModels] = useState([]);\n  const [trainLoading, setTrainLoading] = useState(false);\n  const [hyperParamLoading, setHyperParamLoading] = useState(false);\n  const [predictLoading, setpredictLoading] = useState(false);\n  const [saveLoading, setSaveLoading] = useState(false);\n  const [columnNames, setColumnNames] = useState([]);\n  const [columnInsights, setColumnInsights] = useState([]);\n  const [columnsToDrop, setColumnsToDrop] = useState(new Set());\n  const [isModel, setIsModel] = useState(false);\n  const [modelId, setModelId] = useState(\"\");\n  const [elbowData, setElbowData] = useState(\"\");\n  const [finalData, setFinalData] = useState(\"\");\n  const [silhouetteData, setSilhouetteData] = useState(\"\");\n  const [optimalK, setOptimalK] = useState(0);\n  const [selectedOption, setSelectedOption] = useState('');\n  const [value1, setValue1] = useState([0, 40]);\n  const [value, setValue] = useState(1);\n\n  useEffect(() => {\n    console.log('value1', value1);\n    console.log('value', value);\n  }, [value1, value]);\n\n  const handleChange = (event) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const renderOptions = () => {\n    const options = [];\n    for (let i = 1; i <= 10; i++) {\n      options.push(<option key={i} value={i}>{i}</option>);\n    }\n    return options;\n  };\n\n  const handleTrainFileChange = (e) => {\n    setTrainFile(e.target.files[0]);\n    setTrainFileLabel(e.target.files[0].name);\n    const fileReader = new FileReader();\n    fileReader.onload = async (event) => {\n    const fileContent = event.target.result;\n\n    // Extract the column names\n    const parsedData = Papa.parse(fileContent, { header: true });\n    const firstLine = fileContent.split(\"\\n\")[0];\n    const columns = firstLine.split(\",\");\n\n    // Update the column names state\n    setColumnNames(columns);\n    analyzeColumns(parsedData.data);\n  };\n  fileReader.readAsText(e.target.files[0]);\n  };\n\n  const handleAlgoSelectChange = (e) => {\n    setSelectedAlgo(e.target.value);\n  };\n\n  const handleTargetStringChange = (e) => {\n    setTargetString(e.target.value);\n  };\n\n  const handlePredictSubmit = async (e) => {\n    e.preventDefault();\n    setpredictLoading(true);\n    const formData = new FormData();\n    formData.append(\"file\", predictFile);\n    formData.append(\"run_name\", modelId);\n\n    const response = await fetch(predict_endpoint, {\n      method: \"POST\",\n      body: formData,\n    });\n\n    const data = await response.json();\n    setpredictLoading(false);\n    const blob = new Blob([JSON.stringify(data, null, 2)], {type: \"application/json\"});\n    \n    // Create an object URL for the blob object\n    const url = URL.createObjectURL(blob);\n    \n    // Create a link element\n    const link = document.createElement('a');\n    \n    // Set the href and download attributes for the link\n    link.href = url;\n    link.download = 'predict_response.json';\n    \n    // Append the link to the body\n    document.body.appendChild(link);\n    \n    // Simulate click\n    link.click();\n    \n    // Remove the link after download\n    document.body.removeChild(link);\n  };\n\n  const handlePredictFileChange = (e) => {\n    setPredictFile(e.target.files[0]);\n    setPredictFileLabel(e.target.files[0].name);\n  };\n\n  const analyzeColumns = (data) => {\n    const filteredData = data.map((row) => {\n      const newRow = { ...row };\n      columnsToDrop.forEach((col) => {\n        delete newRow[col];\n      });\n      return newRow;\n    });\n\n    const insights = filteredData.reduce(\n      (acc, row) => {\n        Object.entries(row).forEach(([key, value]) => {\n          if (!acc[key]) {\n            acc[key] = {\n              type: null,\n              unique_values: new Set(),\n              null_count: 0,\n              min: Number.POSITIVE_INFINITY,\n              max: Number.NEGATIVE_INFINITY,\n              sum: 0,\n              counter: 0,\n            };\n          }\n  \n          if (value === \"\" || value === null) {\n            acc[key].null_count += 1;\n          } else {\n            if (!isNaN(value)) {\n              const numValue = Number(value);\n              acc[key].min = Math.min(acc[key].min, numValue);\n              acc[key].max = Math.max(acc[key].max, numValue);\n              acc[key].sum += numValue;\n              acc[key].counter += 1;\n            }\n  \n            acc[key].unique_values.add(value);\n          }\n        });\n  \n        return acc;\n      },\n      {}\n    );\n  \n    const result = Object.entries(insights).map(([name, data]) => ({\n      name,\n      type: isNaN(Array.from(data.unique_values)[0]) ? \"string\" : \"number\",\n      unique_values: data.unique_values.size,\n      null_count: data.null_count,\n      min: isNaN(Array.from(data.unique_values)[0]) ? null : (data.min === Number.POSITIVE_INFINITY ? null : data.min),\n      max: isNaN(Array.from(data.unique_values)[0]) ? null : (data.max === Number.NEGATIVE_INFINITY ? null : data.max),\n      mean: isNaN(Array.from(data.unique_values)[0]) ? null : (data.sum / (data.counter - data.null_count)).toFixed(2),\n    }));\n  \n    setColumnInsights(result);\n  };\n\n\n  const handleUnsupervisedFileChange = (e) => {\n    setUnsupervisedFile(e.target.files[0]);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setTrainLoading(true);\n  \n    const formData = new FormData();\n    formData.append(\"file\", trainFile);\n    formData.append(\"target_string\", targetString);\n    formData.append(\"algo\", selectedAlgo);\n    formData.append(\"ntrees_first\", value1[0]);\n    formData.append(\"ntrees_last\", value1[1]);\n    formData.append(\"ntrees_step\", value);\n    console.log(selectedAlgo);\n  \n    const response = await fetch(supervised_endpoint, {\n      method: \"POST\",\n      body: formData,\n    });\n\n    const data = await response.json();\n    console.log(data);\n    var container = document.getElementById(\"responseContainer\");\n    container.innerHTML = \"\";\n    let table = document.createElement('table');\n\n    // Create table header\n    let thead = document.createElement('thead');\n    let headerRow = document.createElement('tr');\n\n    for (let key in data) {\n        let th = document.createElement('th');\n        th.textContent = key;\n        headerRow.appendChild(th);\n    }\n\n    thead.appendChild(headerRow);\n    table.appendChild(thead);\n\n    // Create table body\n    let tbody = document.createElement('tbody');\n\n    // Assuming all arrays in `data` are of the same length\n    for (let i = 0; i < Object.keys(data).length; i++) {\n        let dataRow = document.createElement('tr');\n        for (let key in data) {\n            let td = document.createElement('td');\n            td.textContent = data[key][i];  // Change from `data[key][0]` to `data[key][i]`\n            dataRow.appendChild(td);\n        }\n        tbody.appendChild(dataRow);\n    }\n\n    table.appendChild(tbody);\n    container.appendChild(table);\n\n    // Add the table to the body of the page\n    console.log(data);\n    \n    setTrainLoading(false);\n    setIsModel(true);\n  };\n\n  const theme = createTheme({\n    palette: {\n      primary: {\n        main: '#42a5f5',\n      },\n      secondary: {\n        main: '#42a5f5',\n      }\n    },\n  });\n\n  const handleUnsupervisedSubmit = async (e) => {\n    e.preventDefault();\n    setunsupervisedLoading(true);\n    const formData = new FormData();\n    formData.append(\"file\", unsupervisedFile);\n    const response = await fetch(unsupervised_endpoint, {\n      method: \"POST\",\n      body: formData,\n    });\n\n    const data = await response.json();\n    setOptimalK(data['optimal_k']);\n    setElbowData(data['elbowImage']);\n    setSilhouetteData(data['silhouetteImage'])\n    setunsupervisedLoading(false);\n    setFinalData(\"\");\n  };\n\n  const handleUnsupervisedFinal = async (e) => {\n    e.preventDefault();\n    setunsupervisedLoading(true);\n    const formData = new FormData();\n    formData.append(\"optimal_k\", optimalK);\n    const response = await fetch(unsupervised_final_endpoint, {\n      method: \"POST\",\n      body: formData,\n    });\n\n    const data = await response.json();\n    console.log(optimalK);\n    console.log(data['finalImage'])\n    setOptimalK(0);\n    if(data['finalImage']){\n      setFinalData(data['finalImage']);\n    }\n    else {\n      setFinalData(\"\");\n    }\n    console.log(finalData);\n    setunsupervisedLoading(false);\n  };\n\n  const saveSelectedModels = async () => {\n    setSaveLoading(true);\n    const response = await fetch(save_endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(selectedModels),\n    });\n\n    if (response.ok) {\n      console.log(\"Selected models saved successfully\");\n      alert(\"Selected models are saved successfully\");\n      setSelectedModels([]);\n    } else {\n      console.error(\"Error saving selected models\");\n    }\n    setSaveLoading(false);\n  };\n  \n  return (    \n  <div>\n    <div className={styles.navmanual}>\n      <nav>\n      <ThemeProvider theme={theme}>\n        <Button style={{color: 'white', margin: 5}} size=\"small\" color=\"primary\" variant=\"contained\" onClick={() => setMode('unsupervised')}>Unsupervised Training</Button>\n        <Button style={{color: 'white', margin: 5}} size=\"small\" color=\"secondary\" variant=\"contained\" onClick={() => setMode('supervised')}>Hyperparameter Optimization</Button>\n        </ThemeProvider>\n      </nav>\n    </div>\n    {mode === 'unsupervised' && \n      <div className={styles.unsupervisedSection}>\n        <h2>TRAIN</h2>\n        <form onSubmit={handleUnsupervisedSubmit}>\n          <label htmlFor=\"unsupervisedFile\"> <strong> Upload Your Train File </strong></label>\n          <input\n            type=\"file\"\n            id=\"unsupervisedFile\"\n            name=\"unsupervisedFile\"\n            onChange={(e) => handleUnsupervisedFileChange(e)}\n          />\n          <br />\n            <Button style={{ width: \"200px\", height: \"50px\", margin: \"10px\"}} color=\"info\" variant=\"contained\" type=\"submit\"><strong>TRAIN UNSUPERVISED</strong></Button>\n        </form>\n        {unsupervisedLoading && (\n        <div className={styles.loadingSection}>\n          <PropagateLoader color=\"#4A90E2\" size={50} />\n        </div>\n        )}\n        {optimalK != 0 && (\n          <div>\n          <div className={styles.images_container}>\n            <img src={`data:image/jpeg;base64,${elbowData}`} alt='elbow_image' style={{ width: '700px', height: 'auto' }} />\n            <img src={`data:image/jpeg;base64,${silhouetteData}`} style={{ width: '700px', height: 'auto' }} />\n          </div>\n          <p> Optimal K we found is {optimalK}. <br/> However, you can select a k value between 1 and 10. </p>\n          <select value={selectedOption} onChange={handleChange}>\n            <option value=\"\">Select an option</option>\n            {renderOptions()}\n          </select>\n          <form onSubmit={handleUnsupervisedFinal}>\n          <Button style={{ width: \"200px\", height: \"50px\", margin: \"10px\"}} color=\"info\" variant=\"contained\" type=\"submit\"><strong>GET THE FINAL</strong></Button>\n          </form>\n          </div>\n        )}\n        {finalData!= \"\" && (\n        <div className={styles.images_container}>\n          <img src={`data:image/jpeg;base64,${finalData}`} alt='final_image' style={{ width: '1000px', height: 'auto' }} />\n        </div>)\n        }\n      </div>}\n      {mode === 'supervised' && \n      <div className={styles.supervisedSection}>\n        <h2>TRAIN</h2>\n        <form onSubmit={handleSubmit}>\n        <label htmlFor=\"trainFile\"> <strong>Choose Your Train File  </strong></label>\n        <input\n          type=\"file\"\n          id=\"trainFile\"\n          name=\"trainFile\"\n          onChange={(e) => handleTrainFileChange          (e)}\n          />\n          \n          <label htmlFor=\"targetString\">\n            {columnNames.length > 0\n              ? \"Select the target column! \"\n              : \"Upload your train.csv file first! \"}\n          </label>\n          {columnNames.length > 0 ? (\n          <select\n            id=\"targetString\"\n            name=\"targetString\"\n            value={targetString}\n            onChange={(e) => handleTargetStringChange(e)}\n          >\n            {columnNames.map((columnName) => (\n              <option key={columnName} value={columnName}>\n                {columnName}\n              </option>\n            ))}\n          </select>\n        ) : (\n          <input\n            type=\"text\"\n            id=\"targetString\"\n            name=\"targetString\"\n            value={targetString}\n            onChange={(e) => handleTargetStringChange(e)}\n            disabled\n          />\n        )}\n            <br/>\n            <br/>\n            <label htmlFor=\"algos\"><strong>Select Your Supervised Algorithm</strong> </label>\n            <br/>\n            <select name=\"algos\" id=\"algos\" value={selectedAlgo} onChange={handleAlgoSelectChange}>\n              <option value=\"glm\">GLM</option>\n              <option value=\"rf\">Random Forest</option>\n              <option value=\"gbm\">GBM</option>\n              <option value=\"xgb\">XGBoost</option>\n            </select>\n            <br></br>\n            <br></br>\n            <br></br>\n            {selectedAlgo == \"gbm\" && \n            <div className=\"hyperparam_options\">\n              <MinimumDistanceSlider title={'ntrees'}  minDistance={10} initValues={[0, 40]} initValue={1} value1={value1} setValue1={setValue1} value={value} setValue={setValue} />\n            </div>}\n            <Button onClick={handleSubmit}  style={{ width: \"200px\", height: \"50px\", margin: \"10px\"}} color=\"info\" variant=\"contained\" type=\"submit\"><strong>TRAIN SUPERVISED</strong></Button>\n        </form>\n      </div>}\n      {mode === 'supervised' && trainLoading && (\n        <div className={styles.loadingSection}>\n          <PropagateLoader color=\"#4A90E2\" size={50} />\n        </div>\n        )}\n        <div id=\"responseContainer\" className={styles.leaderboardContainer}>\n        {isModel && (\n        <Button onClick={saveSelectedModels} style={{ width: \"300px\", height: \"50px\", margin: \"10px\"}} color=\"info\" variant=\"contained\" type=\"submit\"><strong>Save This Model</strong></Button>\n        )}\n        {saveLoading && (\n        <div className={styles.loadingSection}>\n          <RingLoader color=\"#4A90E2\" size={100} />\n        </div>\n      )}\n        </div>\n  </div>\n  );\n};\n\nexport default Manual;","/Users/basakonder/Desktop/automl/frontend-local/src/components/AppBar.js",["141"],[],"/Users/basakonder/Desktop/automl/frontend-local/src/components/Predict.js",["142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167"],[],"import React, { useState } from \"react\";\nimport styles from './User.module.css';\nimport Leaderboard from './Leaderboard';\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport PropagateLoader from \"react-spinners/PropagateLoader\";\nimport RingLoader from \"react-spinners/RingLoader\";\nimport Papa from \"papaparse\";\nimport Button from '@mui/material/Button';\nimport ReactVirtualizedTable from \"./VirtualTable\";\n\nconst predict_endpoint = 'https://inference-6r72er7ega-uc.a.run.app/predict';\n// const all_models_endpoint = 'https://backend-6r72er7ega-uc.a.run.app/run_names';\nconst all_models_endpoint = 'http://localhost:8000/runs';\n// const one_model_endpoint = 'https://backend-6r72er7ega-uc.a.run.app/run_info';\nconst one_model_endpoint = 'http://localhost:8000/run_info';\nconst train_endpoint = 'https://backend-6r72er7ega-uc.a.run.app/train';\nconst save_endpoint = 'https://backend-6r72er7ega-uc.a.run.app/save_models';\n\nconst User = () => {\n  const [trainFile, setTrainFile] = useState(null);\n  const [trainFileLabel, setTrainFileLabel] = useState(\" Choose file \");\n  const [predictFile, setPredictFile] = useState(null);\n  const [modelId, setModelId] = useState(\"\");\n  const [predictFileLabel, setPredictFileLabel] = useState(\" Choose file \");\n  const [targetString, setTargetString] = useState(\"\");\n  const [maxRuntimeSecs, setMaxRuntimeSecs] = useState(\"\");\n  const [maxModels, setMaxModels] = useState(\"\");\n  const [nfolds, setNfolds] = useState(\"\");\n  const [seed, setSeed] = useState(\"\");\n  const [selectedAlgos, setSelectedAlgos] = useState([]);\n  const [leaderboardData, setLeaderboardData] = useState(null);\n  const [selectedModels, setSelectedModels] = useState([]);\n  const [trainLoading, setTrainLoading] = useState(false);\n  const [predictLoading, setpredictLoading] = useState(false);\n  const [saveLoading, setSaveLoading] = useState(false);\n  const [columnNames, setColumnNames] = useState([]);\n  const [columnInsights, setColumnInsights] = useState([]);\n  const [columnsToDrop, setColumnsToDrop] = useState(new Set());\n  const [heatmap, setHeatmap] = useState(null);\n  const [oneModelData, setOneModelData] = useState(null);\n\n  const analyzeColumns = (data) => {\n    const filteredData = data.map((row) => {\n      const newRow = { ...row };\n      columnsToDrop.forEach((col) => {\n        delete newRow[col];\n      });\n      return newRow;\n    });\n\n    const insights = filteredData.reduce(\n      (acc, row) => {\n        Object.entries(row).forEach(([key, value]) => {\n          if (!acc[key]) {\n            acc[key] = {\n              type: null,\n              unique_values: new Set(),\n              null_count: 0,\n              min: Number.POSITIVE_INFINITY,\n              max: Number.NEGATIVE_INFINITY,\n              sum: 0,\n              counter: 0,\n            };\n          }\n  \n          if (value === \"\" || value === null) {\n            acc[key].null_count += 1;\n          } else {\n            if (!isNaN(value)) {\n              const numValue = Number(value);\n              acc[key].min = Math.min(acc[key].min, numValue);\n              acc[key].max = Math.max(acc[key].max, numValue);\n              acc[key].sum += numValue;\n              acc[key].counter += 1;\n            }\n  \n            acc[key].unique_values.add(value);\n          }\n        });\n  \n        return acc;\n      },\n      {}\n    );\n  \n    const result = Object.entries(insights).map(([name, data]) => ({\n      name,\n      type: isNaN(Array.from(data.unique_values)[0]) ? \"string\" : \"number\",\n      unique_values: data.unique_values.size,\n      null_count: data.null_count,\n      min: isNaN(Array.from(data.unique_values)[0]) ? null : (data.min === Number.POSITIVE_INFINITY ? null : data.min),\n      max: isNaN(Array.from(data.unique_values)[0]) ? null : (data.max === Number.NEGATIVE_INFINITY ? null : data.max),\n      mean: isNaN(Array.from(data.unique_values)[0]) ? null : (data.sum / (data.counter - data.null_count)).toFixed(2),\n    }));\n  \n    setColumnInsights(result);\n  };\n\n  const handleTrainFileChange = (e) => {\n    setTrainFile(e.target.files[0]);\n    setTrainFileLabel(e.target.files[0].name);\n    const fileReader = new FileReader();\n    fileReader.onload = async (event) => {\n    const fileContent = event.target.result;\n\n    // Extract the column names\n    const parsedData = Papa.parse(fileContent, { header: true });\n    const firstLine = fileContent.split(\"\\n\")[0];\n    const columns = firstLine.split(\",\");\n\n    // Update the column names state\n    setColumnNames(columns);\n    analyzeColumns(parsedData.data);\n  };\n  fileReader.readAsText(e.target.files[0]);\n  };\n\n  const handlePredictFileChange = (e) => {\n    setPredictFile(e.target.files[0]);\n    setPredictFileLabel(e.target.files[0].name);\n  };\n\n  const handleModelIdChange = (e) => {\n    setModelId(e.target.value);\n  };\n\n  const handleTargetStringChange = (e) => {\n    setTargetString(e.target.value);\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setTrainLoading(true);\n  \n    const formData = new FormData();\n    formData.append(\"file\", trainFile);\n    formData.append(\"target_string\", targetString);\n    if (maxRuntimeSecs) formData.append(\"max_runtime_secs\", maxRuntimeSecs);\n    if (maxModels) formData.append(\"max_models\", maxModels);\n    if (nfolds) formData.append(\"nfolds\", nfolds);\n    if (seed) formData.append(\"seed\", seed);\n    if (selectedAlgos.length != 0) formData.append(\"include_algos\", JSON.stringify(selectedAlgos));\n  \n    const response = await fetch(train_endpoint, {\n      method: \"POST\",\n      body: formData,\n    });\n\n    const data = await response.json();\n    const parsedJsonData = Object.keys(JSON.parse(data).model_id).map((key) => {\n      const model = {};\n      for (const prop in JSON.parse(data)) {\n        model[prop] = JSON.parse(data)[prop][key];\n      }\n      return model;\n    });\n    \n    setLeaderboardData(parsedJsonData);    \n    setTrainLoading(false);\n  };\n\n  const handlePredictSubmit = async (e) => {\n    e.preventDefault();\n    setpredictLoading(true);\n    const formData = new FormData();\n    formData.append(\"file\", predictFile);\n    formData.append(\"run_name\", modelId);\n\n    const response = await fetch(predict_endpoint, {\n      method: \"POST\",\n      body: formData,\n    });\n\n    const data = await response.json();\n    setpredictLoading(false);\n    const blob = new Blob([JSON.stringify(data, null, 2)], {type: \"application/json\"});\n    \n    // Create an object URL for the blob object\n    const url = URL.createObjectURL(blob);\n    \n    // Create a link element\n    const link = document.createElement('a');\n    \n    // Set the href and download attributes for the link\n    link.href = url;\n    link.download = 'predict_response.json';\n    \n    // Append the link to the body\n    document.body.appendChild(link);\n    \n    // Simulate click\n    link.click();\n    \n    // Remove the link after download\n    document.body.removeChild(link);\n  };\n\n  const getAllModels = async (e) => {\n    var container = document.getElementById(\"responseContainer\");\n    e.preventDefault();\n    // fetch(all_models_endpoint)  // Replace with your actual backend endpoint URL\n    // .then(function(response) {\n    //   return response.json();\n    // })\n    // .then(function(responseData) {\n    //   // Iterate over the response data and create a paragraph for each item\n    //   responseData.forEach(function(item) {\n    //     var paragraph = document.createElement(\"p\");\n    //     paragraph.textContent = item;\n    //     container.appendChild(paragraph);\n    //   });\n    // })\n    // .catch(function(error) {\n    //   console.log('Error:', error);\n    // });\n  };\n\n  const getOneModel = async (e) => {\n\n    var cont = document.getElementById(\"responseModel\");\n    console.log(modelId);\n    e.preventDefault();\n    const response = await fetch(one_model_endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n      body: modelId,\n    });\n  \n    console.log(response);\n    const responseData = await response.json();\n    setOneModelData(responseData);\n  };\n\n  const saveSelectedModels = async () => {\n    setSaveLoading(true);\n    const response = await fetch(save_endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(selectedModels),\n    });\n\n    if (response.ok) {\n      console.log(\"Selected models saved successfully\");\n      alert(\"Selected models are saved successfully\");\n      setLeaderboardData(null);\n      setSelectedModels([]);\n    } else {\n      console.error(\"Error saving selected models\");\n    }\n    setSaveLoading(false);\n  };\n  return (\n    <div className={styles.AutoMLPipeline__container}>\n      <div className={styles.predictSection}>\n        <h2>Predict</h2>\n        <div className={styles.predictForm}>\n        <form onSubmit={getAllModels}>\n        <strong> Get Information of the Models: </strong> <br />\n        <Button style={{ width: \"250px\", height: \"50px\", margin: \"10px\"}} color=\"secondary\" variant=\"contained\" type=\"submit\"><strong>Get All Models</strong></Button>\n        <div id=\"responseContainer\">\n          <ReactVirtualizedTable></ReactVirtualizedTable>\n        </div>\n        </form>\n        <br></br>\n        <form onSubmit={getOneModel}>\n          <label htmlFor=\"modelId\"> <strong> Or you can get your model by ID: </strong></label>\n          <input\n            type=\"text\"\n            id=\"modelId\"\n            name=\"modelId\"\n            value={modelId}\n            onChange={(e) => handleModelIdChange(e)}\n          />\n          <br />\n        <Button style={{ width: \"250px\", height: \"50px\", margin: \"10px\"}} color=\"secondary\" variant=\"contained\" type=\"submit\"><strong> Get Model by Id</strong></Button>\n        <div id=\"responseModel\">\n        {oneModelData && (\n        <pre>{JSON.stringify(oneModelData, null, 2)}</pre>\n      )}\n        </div>\n        </form>\n        </div>\n        <br />\n        <br />\n        <br />\n        <form onSubmit={handlePredictSubmit}>\n          <label htmlFor=\"predictFile\"> <strong> Choose Your Test File: </strong></label>\n          <input\n            type=\"file\"\n            id=\"predictFile\"\n            name=\"predictFile\"\n            onChange={(e) => handlePredictFileChange(e)}\n          />\n          <br></br>\n          <label htmlFor=\"modelId\"> <strong> Specify Model: </strong></label>\n          <input\n            type=\"text\"\n            id=\"modelId\"\n            name=\"modelId\"\n            value={modelId}\n            onChange={(e) => handleModelIdChange(e)}\n          />\n          <br />\n          \n        <Button style={{ width: \"300px\", height: \"50px\", margin: \"10px\"}} color=\"secondary\" variant=\"contained\" type=\"submit\"><strong>Predict by This Model</strong></Button>\n        </form>\n        {predictLoading && (\n        <div className={styles.loadingSection}>\n          <PropagateLoader color=\"#7b1fa2\" size={50} />\n        </div>\n      )}\n      </div>\n\n    </div>\n  );\n};\n\nexport default User;","/Users/basakonder/Desktop/automl/frontend-local/src/components/SliderMinimum.js",[],[],"/Users/basakonder/Desktop/automl/frontend-local/src/components/VirtualTable.js",[],[],{"ruleId":"168","severity":1,"message":"169","line":16,"column":10,"nodeType":"170","messageId":"171","endLine":16,"endColumn":21},{"ruleId":"168","severity":1,"message":"172","line":16,"column":23,"nodeType":"170","messageId":"171","endLine":16,"endColumn":37},{"ruleId":"168","severity":1,"message":"173","line":17,"column":10,"nodeType":"170","messageId":"171","endLine":17,"endColumn":23},{"ruleId":"168","severity":1,"message":"174","line":17,"column":25,"nodeType":"170","messageId":"171","endLine":17,"endColumn":41},{"ruleId":"168","severity":1,"message":"175","line":94,"column":11,"nodeType":"170","messageId":"171","endLine":94,"endColumn":15},{"ruleId":"168","severity":1,"message":"176","line":7,"column":8,"nodeType":"170","messageId":"171","endLine":7,"endColumn":14},{"ruleId":"168","severity":1,"message":"177","line":13,"column":8,"nodeType":"170","messageId":"171","endLine":13,"endColumn":18},{"ruleId":"168","severity":1,"message":"178","line":15,"column":8,"nodeType":"170","messageId":"171","endLine":15,"endColumn":12},{"ruleId":"168","severity":1,"message":"179","line":16,"column":8,"nodeType":"170","messageId":"171","endLine":16,"endColumn":16},{"ruleId":"168","severity":1,"message":"180","line":18,"column":8,"nodeType":"170","messageId":"171","endLine":18,"endColumn":16},{"ruleId":"168","severity":1,"message":"181","line":55,"column":10,"nodeType":"170","messageId":"171","endLine":55,"endColumn":21},{"ruleId":"168","severity":1,"message":"182","line":57,"column":9,"nodeType":"170","messageId":"171","endLine":57,"endColumn":26},{"ruleId":"168","severity":1,"message":"183","line":61,"column":9,"nodeType":"170","messageId":"171","endLine":61,"endColumn":27},{"ruleId":"168","severity":1,"message":"184","line":43,"column":10,"nodeType":"170","messageId":"171","endLine":43,"endColumn":24},{"ruleId":"168","severity":1,"message":"185","line":44,"column":25,"nodeType":"170","messageId":"171","endLine":44,"endColumn":41},{"ruleId":"168","severity":1,"message":"186","line":5,"column":8,"nodeType":"170","messageId":"171","endLine":5,"endColumn":23},{"ruleId":"168","severity":1,"message":"187","line":73,"column":10,"nodeType":"170","messageId":"171","endLine":73,"endColumn":24},{"ruleId":"168","severity":1,"message":"188","line":75,"column":10,"nodeType":"170","messageId":"171","endLine":75,"endColumn":26},{"ruleId":"168","severity":1,"message":"189","line":85,"column":10,"nodeType":"170","messageId":"171","endLine":85,"endColumn":24},{"ruleId":"168","severity":1,"message":"190","line":245,"column":9,"nodeType":"170","messageId":"171","endLine":245,"endColumn":32},{"ruleId":"191","severity":1,"message":"192","line":303,"column":30,"nodeType":"193","messageId":"194","endLine":303,"endColumn":32},{"ruleId":"168","severity":1,"message":"195","line":311,"column":11,"nodeType":"170","messageId":"171","endLine":311,"endColumn":21},{"ruleId":"168","severity":1,"message":"196","line":324,"column":9,"nodeType":"170","messageId":"171","endLine":324,"endColumn":28},{"ruleId":"168","severity":1,"message":"197","line":2,"column":27,"nodeType":"170","messageId":"171","endLine":2,"endColumn":34},{"ruleId":"198","severity":1,"message":"199","line":63,"column":33,"nodeType":"200","messageId":"201","endLine":63,"endColumn":34},{"ruleId":"168","severity":1,"message":"202","line":3,"column":8,"nodeType":"170","messageId":"171","endLine":3,"endColumn":19},{"ruleId":"168","severity":1,"message":"203","line":4,"column":8,"nodeType":"170","messageId":"171","endLine":4,"endColumn":20},{"ruleId":"168","severity":1,"message":"187","line":23,"column":10,"nodeType":"170","messageId":"171","endLine":23,"endColumn":24},{"ruleId":"168","severity":1,"message":"188","line":25,"column":10,"nodeType":"170","messageId":"171","endLine":25,"endColumn":26},{"ruleId":"168","severity":1,"message":"204","line":27,"column":10,"nodeType":"170","messageId":"171","endLine":27,"endColumn":24},{"ruleId":"168","severity":1,"message":"205","line":27,"column":26,"nodeType":"170","messageId":"171","endLine":27,"endColumn":43},{"ruleId":"168","severity":1,"message":"206","line":28,"column":10,"nodeType":"170","messageId":"171","endLine":28,"endColumn":19},{"ruleId":"168","severity":1,"message":"207","line":28,"column":21,"nodeType":"170","messageId":"171","endLine":28,"endColumn":33},{"ruleId":"168","severity":1,"message":"208","line":29,"column":10,"nodeType":"170","messageId":"171","endLine":29,"endColumn":16},{"ruleId":"168","severity":1,"message":"209","line":29,"column":18,"nodeType":"170","messageId":"171","endLine":29,"endColumn":27},{"ruleId":"168","severity":1,"message":"210","line":30,"column":10,"nodeType":"170","messageId":"171","endLine":30,"endColumn":14},{"ruleId":"168","severity":1,"message":"211","line":30,"column":16,"nodeType":"170","messageId":"171","endLine":30,"endColumn":23},{"ruleId":"168","severity":1,"message":"212","line":34,"column":10,"nodeType":"170","messageId":"171","endLine":34,"endColumn":27},{"ruleId":"168","severity":1,"message":"213","line":34,"column":29,"nodeType":"170","messageId":"171","endLine":34,"endColumn":49},{"ruleId":"168","severity":1,"message":"189","line":35,"column":10,"nodeType":"170","messageId":"171","endLine":35,"endColumn":24},{"ruleId":"168","severity":1,"message":"184","line":38,"column":10,"nodeType":"170","messageId":"171","endLine":38,"endColumn":24},{"ruleId":"168","severity":1,"message":"185","line":39,"column":25,"nodeType":"170","messageId":"171","endLine":39,"endColumn":41},{"ruleId":"168","severity":1,"message":"214","line":41,"column":19,"nodeType":"170","messageId":"171","endLine":41,"endColumn":29},{"ruleId":"168","severity":1,"message":"196","line":94,"column":9,"nodeType":"170","messageId":"171","endLine":94,"endColumn":28},{"ruleId":"168","severity":1,"message":"190","line":130,"column":9,"nodeType":"170","messageId":"171","endLine":130,"endColumn":32},{"ruleId":"191","severity":1,"message":"192","line":360,"column":19,"nodeType":"193","messageId":"194","endLine":360,"endColumn":21},{"ruleId":"215","severity":1,"message":"216","line":364,"column":13,"nodeType":"217","endLine":364,"endColumn":112},{"ruleId":"191","severity":1,"message":"192","line":376,"column":19,"nodeType":"193","messageId":"194","endLine":376,"endColumn":21},{"ruleId":"191","severity":1,"message":"218","line":435,"column":27,"nodeType":"193","messageId":"194","endLine":435,"endColumn":29},{"ruleId":"168","severity":1,"message":"219","line":13,"column":10,"nodeType":"170","messageId":"171","endLine":13,"endColumn":14},{"ruleId":"168","severity":1,"message":"202","line":3,"column":8,"nodeType":"170","messageId":"171","endLine":3,"endColumn":19},{"ruleId":"168","severity":1,"message":"203","line":4,"column":8,"nodeType":"170","messageId":"171","endLine":4,"endColumn":20},{"ruleId":"168","severity":1,"message":"220","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":18},{"ruleId":"168","severity":1,"message":"221","line":13,"column":7,"nodeType":"170","messageId":"171","endLine":13,"endColumn":26},{"ruleId":"168","severity":1,"message":"187","line":21,"column":10,"nodeType":"170","messageId":"171","endLine":21,"endColumn":24},{"ruleId":"168","severity":1,"message":"188","line":24,"column":10,"nodeType":"170","messageId":"171","endLine":24,"endColumn":26},{"ruleId":"168","severity":1,"message":"205","line":26,"column":26,"nodeType":"170","messageId":"171","endLine":26,"endColumn":43},{"ruleId":"168","severity":1,"message":"207","line":27,"column":21,"nodeType":"170","messageId":"171","endLine":27,"endColumn":33},{"ruleId":"168","severity":1,"message":"209","line":28,"column":18,"nodeType":"170","messageId":"171","endLine":28,"endColumn":27},{"ruleId":"168","severity":1,"message":"211","line":29,"column":16,"nodeType":"170","messageId":"171","endLine":29,"endColumn":23},{"ruleId":"168","severity":1,"message":"222","line":30,"column":25,"nodeType":"170","messageId":"171","endLine":30,"endColumn":41},{"ruleId":"168","severity":1,"message":"223","line":31,"column":10,"nodeType":"170","messageId":"171","endLine":31,"endColumn":25},{"ruleId":"168","severity":1,"message":"224","line":33,"column":10,"nodeType":"170","messageId":"171","endLine":33,"endColumn":22},{"ruleId":"168","severity":1,"message":"225","line":35,"column":10,"nodeType":"170","messageId":"171","endLine":35,"endColumn":21},{"ruleId":"168","severity":1,"message":"226","line":36,"column":10,"nodeType":"170","messageId":"171","endLine":36,"endColumn":21},{"ruleId":"168","severity":1,"message":"184","line":37,"column":10,"nodeType":"170","messageId":"171","endLine":37,"endColumn":24},{"ruleId":"168","severity":1,"message":"185","line":38,"column":25,"nodeType":"170","messageId":"171","endLine":38,"endColumn":41},{"ruleId":"168","severity":1,"message":"227","line":39,"column":10,"nodeType":"170","messageId":"171","endLine":39,"endColumn":17},{"ruleId":"168","severity":1,"message":"228","line":39,"column":19,"nodeType":"170","messageId":"171","endLine":39,"endColumn":29},{"ruleId":"168","severity":1,"message":"229","line":99,"column":9,"nodeType":"170","messageId":"171","endLine":99,"endColumn":30},{"ruleId":"168","severity":1,"message":"230","line":127,"column":9,"nodeType":"170","messageId":"171","endLine":127,"endColumn":33},{"ruleId":"168","severity":1,"message":"231","line":131,"column":9,"nodeType":"170","messageId":"171","endLine":131,"endColumn":21},{"ruleId":"191","severity":1,"message":"192","line":142,"column":30,"nodeType":"193","messageId":"194","endLine":142,"endColumn":32},{"ruleId":"168","severity":1,"message":"232","line":199,"column":9,"nodeType":"170","messageId":"171","endLine":199,"endColumn":18},{"ruleId":"168","severity":1,"message":"233","line":220,"column":9,"nodeType":"170","messageId":"171","endLine":220,"endColumn":13},{"ruleId":"168","severity":1,"message":"234","line":236,"column":9,"nodeType":"170","messageId":"171","endLine":236,"endColumn":27},"no-unused-vars","'trainStatus' is assigned a value but never used.","Identifier","unusedVar","'setTrainStatus' is assigned a value but never used.","'predictStatus' is assigned a value but never used.","'setPredictStatus' is assigned a value but never used.","'data' is assigned a value but never used.","'styles' is defined but never used.","'IconButton' is defined but never used.","'Menu' is defined but never used.","'MenuIcon' is defined but never used.","'MenuItem' is defined but never used.","'anchorElNav' is assigned a value but never used.","'handleOpenNavMenu' is assigned a value but never used.","'handleCloseNavMenu' is assigned a value but never used.","'columnInsights' is assigned a value but never used.","'setColumnsToDrop' is assigned a value but never used.","'PropagateLoader' is defined but never used.","'trainFileLabel' is assigned a value but never used.","'predictFileLabel' is assigned a value but never used.","'predictLoading' is assigned a value but never used.","'handlePredictFileChange' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'parsedData' is assigned a value but never used.","'handlePredictSubmit' is assigned a value but never used.","'useMemo' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Leaderboard' is defined but never used.","'PacmanLoader' is defined but never used.","'maxRuntimeSecs' is assigned a value but never used.","'setMaxRuntimeSecs' is assigned a value but never used.","'maxModels' is assigned a value but never used.","'setMaxModels' is assigned a value but never used.","'nfolds' is assigned a value but never used.","'setNfolds' is assigned a value but never used.","'seed' is assigned a value but never used.","'setSeed' is assigned a value but never used.","'hyperParamLoading' is assigned a value but never used.","'setHyperParamLoading' is assigned a value but never used.","'setModelId' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '===' and instead saw '=='.","'Link' is defined but never used.","'RingLoader' is defined but never used.","'all_models_endpoint' is assigned a value but never used.","'setSelectedAlgos' is assigned a value but never used.","'leaderboardData' is assigned a value but never used.","'trainLoading' is assigned a value but never used.","'saveLoading' is assigned a value but never used.","'columnNames' is assigned a value but never used.","'heatmap' is assigned a value but never used.","'setHeatmap' is assigned a value but never used.","'handleTrainFileChange' is assigned a value but never used.","'handleTargetStringChange' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'container' is assigned a value but never used.","'cont' is assigned a value but never used.","'saveSelectedModels' is assigned a value but never used."]